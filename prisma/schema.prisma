generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "nApi"]
  binaryTargets   = ["native", "linux-arm-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CommandPermission {
  VIEWERS
  FOLLOWERS
  VIPS
  SUBSCRIBERS
  MODERATORS
  BROADCASTER
}

model Commands {
  id            Int               @id @default(autoincrement())
  name          String            @unique @db.VarChar(255)
  aliases       Json?             @default("[]") @db.Json
  cooldown      Int?              @default(10)
  description   String?
  response      String
  enabled       Boolean           @default(true)
  visible       Boolean           @default(true)
  permission    CommandPermission @default(VIEWERS)
  price         Int?              @default(0)
  usage         Int?              @default(0)
  sound_volume  Int?
  sound_file_id Int?
  sound_file    Files?            @relation(fields: [sound_file_id], references: [id])

  @@map("commands")
}

model EventList {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(255)
  data      Json   @db.Json
  timestamp BigInt

  @@map("eventlist")
}

model Events {
  id         Int    @id @default(autoincrement())
  name       String @unique @db.VarChar(255)
  operations Json?  @default("[]") @db.Json

  @@map("events")
}

model Files {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  type      String      @db.VarChar(255)
  data      String
  commands  Commands[]
  greetings Greetings[]

  @@map("files")
}

model Greetings {
  id            Int      @id @default(autoincrement())
  userId        Int?
  username      String?  @db.VarChar(255)
  message       String
  enabled       Boolean?
  sound_file_id Int?
  sound_volume  Int?
  sound_file    Files?   @relation(fields: [sound_file_id], references: [id])

  @@map("greetings")
}

model Keywords {
  id       Int      @id @default(autoincrement())
  name     String   @unique @db.VarChar(255)
  response String
  enabled  Boolean? @default(true)
  cooldown Int?     @default(30)

  @@index([name], name: "keywords_name_index")
  @@map("keywords")
}

model Overlays {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(255)
  data String
  css  String?
  js   Json?   @default("[]") @db.Json

  @@map("overlays")
}

model Settings {
  id    Int    @id @default(autoincrement())
  space String @db.VarChar(255)
  name  String @db.VarChar(255)
  value Json?  @default("null") @db.Json

  @@unique([space, name], name: "settings_space_name_unique")
  @@map("settings")
}

model SongLikes {
  id        Int     @id @default(autoincrement())
  userId    Int
  name      String  @db.VarChar(255)
  createdAt BigInt
  updatedAt BigInt?

  @@unique([userId, name], name: "songs_likes_userid_name_unique")
  @@map("songs_likes")
}

model Timers {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  enabled          Boolean? @default(true)
  interval         Int?     @default(0)
  responses        Json?    @default("[]") @db.Json
  last             Int?
  triggerTimeStamp BigInt?  @default(0)
  messages         Int?     @default(0)
  triggerMessage   Int?     @default(0)

  @@map("timers")
}

model Users {
  id                Int                  @id
  username          String?              @db.VarChar(255)
  messages          Int?                 @default(0)
  watched           BigInt?              @default(0)
  points            Int?                 @default(0)
  lastMessagePoints BigInt?              @default(0)
  lastWatchedPoints BigInt?              @default(0)
  bits              UsersBits[]
  daily_messages    UsersDailyMessages[]
  tips              UsersTips[]
  quotes            Quotes[]

  @@index([username], name: "users_username_index")
  @@map("users")
}

model UsersBits {
  id        Int     @id @default(autoincrement())
  amount    BigInt
  message   String?
  timestamp BigInt
  userId    Int
  users     Users   @relation(fields: [userId], references: [id])

  @@map("users_bits")
}

model UsersDailyMessages {
  id     Int    @id @default(autoincrement())
  userId Int
  count  Int?   @default(0)
  date   BigInt
  user   Users  @relation(fields: [userId], references: [id])

  @@unique([userId, date], name: "users_daily_messages_userid_name_unique")
  @@map("users_daily_messages")
}

model UsersTips {
  id                   Int     @id @default(autoincrement())
  amount               Float   @db.Real
  inMainCurrencyAmount Float   @db.Real
  rates                Json    @db.Json
  currency             String  @db.VarChar(255)
  message              String?
  timestamp            BigInt
  userId               Int?
  user                 Users?  @relation(fields: [userId], references: [id])

  @@map("users_tips")
}

model Variables {
  id       Int      @id @default(autoincrement())
  name     String   @unique @db.VarChar(255)
  response String
  enabled  Boolean?

  @@unique([name], name: "variables_name_unique")
  @@index([name], name: "variables_name_index")
  @@map("variables")
}

model Widgets {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  x    Int
  y    Int
  w    Int
  h    Int

  @@map("widgets")
}

model Quotes {
  id       Int    @id @default(autoincrement())
  text     String @db.Text
  author   Users? @relation(fields: [authorId], references: [id])
  authorId Int?

  @@unique([text], name: "quotes_text_unique")
  @@map("quotes")
}
